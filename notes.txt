Part 1
1. DOM (Document Object Model) -> Document: isi browser, Object: nilai tipe data pada JS, Model: representasi dari sesuatu. Sehingga secar sederhanan DOM merupakan representasi element HTML pada dokumen menjadi sebuah objek. Antarmuka pemrogram berbasis objek yang merepresentasikan dokumen web
2. DOM Tree -> element HTML di simpan sebagai document. Simplenya merepresentasikan tag-tag HTML dalam sebuah tree. Contohnya ya seperti sebelumnya sebuah element HTML berada dalam document, sehingga kita dapat menyimpulkan document ada root dari DOM tree.

Part 2
1. NodeList vs HTMLCollection. Nodelist adalah ketika kita memilih lebih dari satu node tanpa memperdulikan tipenya, sedangkan HTMLCollection kumpulan node dengan tipe yang sama.
    1.1 Strukturnya mirip array
    1.2 HTMLCollection bersifat live sedangkan nodelist tidak
    1.3 tipe itu element, text, document, entitiy, comment
2. Sturktur hierarki DOM Tree.
    2.1 Root (default Document)
    2.2 Parent Node
    2.3  Child node

Part 3
1. DOM Selection method:
    1.1. getElementById() -> memilih element by id -> Hasil element
    1.2. getElementsByTagName() -> memilih element by tag name -> HTMLCollection
    1.3. getElementByClassName() -> memilih element by class -> HTMLCollection
    1.4. querySelector() -> element
    1.4. querySelectorAll() -> NodeList
2. cara penulisan {node root}.{selectornya}, node root: document (default)

Part 4 selection dom part 2
1. querySelector bisa dibilang menargetkannya seperti CSS, sehingga harus familiar sm CSS dulu.
    1.1 Karena querySelector returnnya element, maka jika terdapat target yang banyak maka element pertama yang ditemukan akan direturn.
2. paling cepat adalah getElementById dan getElementsByTagName. cuman jika tidak bisa dan tidak diperbolehkan mengedit file HTML dan CSS, maka gunakan querySelector dan querySelectorAll. Tapi semua kembali ke kasus yang dihadapi.
3. Mengubah node root.

Part 5 DOM Manipulation part 1: Manipulasi Element
1. element.innerHTML, element.style.<property>, element.setAtribute(), element.classList
    1.1 h1.innerHTML = 'Kevin Chiputra'
    1.2 judul.style.color = 'lightblue'
    1.3 judul.setAttribute('name', 'kevin')
    1.4 getAttribute return isi attribute tsb
    1.5 removeAttribute menghapus attribute
    1.6 mengelolah class menggunakan classList ada classList.add(), classList.remove(), classList.togle(), classList.item(), classList.contains(), classList.replace()
        1.6.1 .classList.item() -> berfungsi untuk mengecek index class pada element
    1.7 .classList.contains() -> cek class jika ada return true dan salah false
    1.8 classList.replace() -> ganti class, cara pakai element.classList.replace('tiga', 'empat')

part 6 DOM Manipulation part 2: Manipulasi Node
1. Beberapa method document.createElement(), document.createTextNode(), node.appndChild(), node.insertBefore, parentNode.removeChild(), parentNode.replaceChild(), dll
    1.1 untuk membuat element baru -> .createElement = membuat element dan createTextNode = membuat text. Kemudian masukan text ke element dengan .appendChild. Jika sudah selesai tinggal masukin ke dalam section yg di mau. Misal di section a, maka select DOM section a dan masukan element baru menggunakan .appendChild(), sectionA.appendChild({pBaru}).
    1.2 appendChild itu memasukan ke bagian akhir, jika mau spesifik pakai insertBefore. unutk insertBefore memerlukan 2 hal penting, pertama parent dan kedua element didepannya, sehingga contohnya ul.insertBefore(liBaru {sebagai yg ingin dimasukan}, li2 {sebelum li2})
    1.3 removeChild -> menghapus child. Dimana diperlukan parentNode({yang ingin dihapus}). Contoh sectionA.removeChild(linkA)
    1.4 replace child pertama-> pertama buat element baru dan textNode dan masukin. Kemudian dapatkan parentNode dan element yang ingin diganti. Contohnya: sectiobB.replaceChild(h2baru, p4)

Part 7 DOM Events
1. Kejadi yang akan terjadi di dalam DOM (click mouse, tombol keyboard, dll)
2. cara mendengarkan event:
    2.1 event handler
        2.1.1 inline HTML attribute -> menambahkan ke tag HTML, misal <p onClick="ubahWarna()"> text </p>.
        2.1.2 Element method -> konsep seperti inline HTML tetapi dituliskan di script, sehingga p2.onclick = ubahWarnaP2
    2.2 addEventListener() -> lebih sederhana dan bersih, cara gunakannya p4.addEventListener('click {events}', function() {function yang ingin digunakan})
3. cara membuat eventHandler "on<event>" misal event = click
4. perbedaan event handler dan addEventListener(), jika event handler menimpa perintah kalau addEventListener menambahkan. Contohnya di script part 7
5. Daftar event: http://developer.mozilla.org/en-US/docs/Web/Events

Part 10 DOM Traversal
1. DOM traversal adalah sebuah cara bergerak melalui DOM tree untuk mengedit element tertentu. Memungkinkan menelusuri element lain melalui suatu element
2. DOM Treaversal method   
    2.1 parentNode, parentElement, nextSibling, nextElementSibling, previousSibling, previousElementSibling
    2.2 beda Node dan element, jika element pasti akan mengembalikan element, jika node bisa tidak pasti mengembalikan element. Misalnya .nextSibling (mengembalikan node) yang akan dikembalikan adalah "enter" jika ditulis dengan enter, sehingga jika ingin pasti mendapatkan sibling selanjutnya secara pasti lebih baik ditulis menggunakan .nextElementSibling 

Part 11 Prevent Default 
1. mencegah aksi default

Part 12 Event bubbling
1. jadi jika suatu event terjadi di element, maka berlaku ke atas"nya (pembungkus). Konsepnya seperti gelembung yang satu pecah dan pecah terus menerus.
2. masalahnya misal pada kasus part 11, kita menekan tombol x maka function dari card akan kepanggil baru melakukan function menghapus card. Kita harus menghentikan hal tersebut dengan e.stopPropagation. Dengan begitu jika menekan tombol x maka hanya fungtion hapus yang jalan